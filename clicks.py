from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from asyncio import sleep
import config as c
import random
import sqlite3

bot = Bot(token=c.token, parse_mode="html")
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start(m: types.Message):
    startbtn = ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = KeyboardButton(text="üíé–ö–ª–∏–∫")
    btn2 = KeyboardButton(text="üë§–ü—Ä–æ—Ñ–∏–ª—å")
    btn3 = KeyboardButton(text="üåê–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    btn4 = KeyboardButton(text="üìö–û –±–æ—Ç–µ")
    startbtn.add(btn1)
    startbtn.add(btn2, btn3)
    startbtn.add(btn4)
    connection = sqlite3.connect('user.db')
    db = connection.cursor()
    db.execute("""CREATE TABLE IF NOT EXISTS user (
    id BIGINT,
    money BIGINT,
    status TEXT,
    dr TEXT,
    zall BIGINT, 
    vall BIGINT
    )""")
    connection.commit()
    db.execute("SELECT * FROM user WHERE id = (?)", (m.from_user.id, ))
    data = db.fetchone()
    if data is None:
        dr = datetime.now().date()
        await m.answer(f'<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {m.from_user.first_name}!</b>', reply_markup=startbtn)
        await bot.send_message(1004250581, f"#–Ω–æ–≤—ã–π_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n–ù–∏–∫: <a href='tg://user?id={m.from_user.id}'>{m.from_user.first_name}</a>\n–ò–¥: <code>{m.from_user.id}</code>")
        db.execute(f"INSERT INTO user VALUES (?, ?, ?, ?, ?, ?)", (m.from_user.id, 0, "–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", dr, 0, 0))
        connection.commit()
    else:
        await m.answer("<b>–û–ø—è—Ç—å? –ø—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!</b>", reply_markup=startbtn)
       
@dp.message_handler(content_types=['text'])
async def texts(m: types.Message):
    connection = sqlite3.connect('user.db')
    db = connection.cursor()
    db.execute("SELECT * FROM user WHERE id = (?)", (m.from_user.id, ))
    data = db.fetchone()
    if m.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å':
        un = m.from_user.username
        pr = un[:5]
        if un != '':
            username = m.from_user.username
        else:
            username = m.from_user.first_name
        vivod = InlineKeyboardMarkup()
        v = KeyboardButton(text="üí∞–í—ã–≤–µ—Å—Ç–∏", callback_data="vivod")
        vivod.add(v)
        await m.answer(f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n‚≠ê–í–∞—à –Ω–∏–∫: {username}\n‚≠ê–í–∞—à id: {m.from_user.id}\n‚≠ê–ë–∞–ª–∞–Ω—Å: {data[1]}\n‚≠ê–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {data[4]}\n‚≠ê–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data[3]}", reply_markup=vivod)
    if m.text == 'üåê–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        s = m.text
        if s == 'üåê–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
            ad = InlineKeyboardMarkup()
            a = KeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å", url="https://pamparampam")
            ad.add(a)
            await m.answer("üëá–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—Ñ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–ª–º–∏–Ω–∏—Å—Ç–∞—Ü–∏–∏", reply_markup=ad) 
    elif m.text == 'üìö–û –±–æ—Ç–µ':
        brnow = datetime.now().date()
        conn = sqlite3.connect('user.db')
        sql = conn.cursor()
        sql.execute("SELECT * FROM user WHERE dr = (?)", (brnow, ))
        row = sql.fetchall()
        
        conn1 = sqlite3.connect('user.db')
        sql1 = conn1.cursor()
        sql1.execute("SELECT * FROM user")
        row1 = sql1.fetchall()
        
        co = sqlite3.connect('user.db')
        sq = conn.cursor()
        sq.execute("SELECT * FROM user WHERE id = (?)", (1004250581, ))
        ro = sq.fetchone()
        await m.answer(f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\nüîª–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(row1)}\nüîª–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(row)}\nüîª–í—ã–ø–ª–∞—á–µ–Ω–æ: {ro[5]}\nüîπ–ë–æ—Ç —Å–æ–∑–¥–∞–Ω: 2021-10-22")
        
    elif m.text == 'üíé–ö–ª–∏–∫':
        await m.answer("–í—ã –∫–ª–∏–∫–Ω—É–ª–∏, –∏ –ø–æ–ª—É—á–∏–ª–∏ 1‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å! ü§ë")
        db.execute(f"Update user set money={data[1]} + 1 WHERE id = (?)", (m.from_user.id, ))
        db.execute(f"Update user set zall={data[4]} + 1 WHERE id = (?)", (m.from_user.id, ))
        connection.commit()

@dp.callback_query_handler()
async def call(c: types.CallbackQuery):
    connection = sqlite3.connect('user.db')
    db = connection.cursor()
    db.execute("SELECT * FROM user WHERE id = (?)", (c.from_user.id, ))
    data = db.fetchone()
    if c.data == 'vivod':
        if data[1] < 500:
            await c.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 500‚ÇΩ!", show_alert=True)
        else:
            await c.message.delete()
            lox = InlineKeyboardMarkup()
            ya = KeyboardButton(text="üí∞–û–ü–õ–ê–¢–ò–¢–¨üí∞", url="https://qiwi.com/n/ATTLE379")
            ty = KeyboardButton(text="‚úÖ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="hahaha")
            lox.add(ya)
            lox.add(ty)
            await c.message.answer(f"<b>–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ 50‚ÇΩ –Ω–∞ –Ω–∞—à –∫–∏–≤–∏ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞–Ω—Ü–∏–∏ –≤–∞–ª—é—Ç!\n–í–∞—à–∏ –¥–µ–Ω—å–≥–∏ —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏–π–¥—É—Ç –Ω–∞–∑–∞–¥!</b>\n\n<b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!!!\n–í –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–¥–∏—Ç–µ –≤–∞—à –∏–¥ (<code>{c.from_user.id}</code>)!</b>", reply_markup=lox)
            db.execute(f"Update user set money={data[1]} - {data[1]} WHERE id = (?)", (c.from_user.id, ))
            db.execute(f"Update user set vall={data[5]} + {data[1]} WHERE id = (?)", (1004250581, ))
            connection.commit()
           
    elif c.data == 'hahaha':
        await c.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: @pramparapam", show_alert=True)
       
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)